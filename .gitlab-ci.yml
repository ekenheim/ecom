workflow:
  rules:
    - if: $CI_COMMIT_TAG  # Create a pipeline if a tag is pushed
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Otherwise, create a pipeline if it's a push to the default branch

variables:
  # --- SSH Settings ---
  CI_SSH_REPOSITORY_URL: ssh://git@gitlab-gitlab-shell.development.svc.cluster.local:22/${CI_PROJECT_PATH}.git
  GIT_DEPTH: 20
  GIT_STRATEGY: none

  # --- Docker Settings ---
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  INTERNAL_REGISTRY_ADDRESS: gitlab-registry.development.svc.cluster.local:5000

services:
  # Keep dind service configured to allow insecure registry communication from daemon side
  - name: docker:dind
    command: ["dockerd", "-H", "tcp://0.0.0.0:2375", "--insecure-registry", "${INTERNAL_REGISTRY_ADDRESS}"]

stages:
  - build

default:
  image: docker:latest
  tags:
    - k8s
  before_script:
    # --- SSH Setup ---
    - apk add --no-cache openssh-client git

    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\\n\\tStrictHostKeyChecking no\\n\\tUserKnownHostsFile /dev/null" > ~/.ssh/config

    # --- Docker Client Configuration for Insecure Registry ---
    # Configure the Docker CLIENT in this container via user config
    - mkdir -p ~/.docker
    - echo "{\"insecure-registries\":[\"${INTERNAL_REGISTRY_ADDRESS}\"]}" > ~/.docker/config.json
    # Verify config.json content
    - echo "Verifying ~/.docker/config.json content:"
    - cat ~/.docker/config.json

    # --- Docker Login ---
    - sleep 5 # Short wait for dind service
    # Login (Client should now use HTTP based on config.json)
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "${INTERNAL_REGISTRY_ADDRESS}"

# --- Build Jobs remain the same ---
build_medusa:
  stage: build
  script:
    - git clone ${CI_SSH_REPOSITORY_URL} . --depth ${GIT_DEPTH:-20}
    - cd medusa
    - >
      docker build \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:$CI_COMMIT_SHORT_SHA" \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:latest" \
        .
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:$CI_COMMIT_SHORT_SHA"
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:latest"
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - medusa/**/*

build_storefront:
  stage: build
  script:
    - git clone ${CI_SSH_REPOSITORY_URL} . --depth ${GIT_DEPTH:-20}
    - cd storefront
    - >
      docker build \
        --build-arg NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY=$NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY \
        --build-arg NEXT_PUBLIC_SEARCH_API_KEY=$NEXT_PUBLIC_SEARCH_API_KEY \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:$CI_COMMIT_SHORT_SHA" \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:latest" \
        .
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:$CI_COMMIT_SHORT_SHA"
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:latest"
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - storefront/**/*