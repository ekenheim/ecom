workflow:
  rules:
    - if: $CI_COMMIT_TAG  # Create a pipeline if a tag is pushed
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Otherwise, create a pipeline if it's a push to the default branch

variables:
  # --- SSH Settings ---
  CI_SSH_REPOSITORY_URL: ssh://git@gitlab-gitlab-shell.development.svc.cluster.local:22/${CI_PROJECT_PATH}.git
  GIT_DEPTH: 20
  GIT_STRATEGY: none

  # --- Docker Settings ---
  DOCKER_HOST: tcp://docker:2375 # Tells docker client how to connect to the dind service
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  INTERNAL_REGISTRY_ADDRESS: gitlab-registry.development.svc.cluster.local:5000

services:
  # Configure the docker:dind service itself to trust the internal registry
  - name: docker:dind
    command: ["dockerd", "-H", "tcp://0.0.0.0:2375", "--insecure-registry", "${INTERNAL_REGISTRY_ADDRESS}"]

stages:
  - build # Build stage for creating images

default:
  image: docker:latest
  tags:
    - k8s
  before_script:
    # --- SSH Setup ---
    # 1. Install SSH client and Git
    - apk add --no-cache openssh-client git

    # 2. Setup SSH Agent
    - eval $(ssh-agent -s)

    # 3. Add the private key from the CI/CD variable SSH_PRIVATE_KEY
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    # 4. Create SSH directory and disable strict host key checking
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\\n\\tStrictHostKeyChecking no\\n\\tUserKnownHostsFile /dev/null" > ~/.ssh/config

    # 5. (Optional) Add known_hosts entry...

    # --- REMOVED Docker Client Configuration ---
    # Relying solely on the dind service configuration now

    # --- Docker Login ---
    # Wait a bit for the dind service to be ready
    - sleep 15
    # Attempt login (The dind service daemon should handle the insecure connection)
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "${INTERNAL_REGISTRY_ADDRESS}"

build_medusa:
  stage: build
  script:
    # Explicitly clone using SSH URL and configured agent
    - git clone ${CI_SSH_REPOSITORY_URL} . --depth ${GIT_DEPTH:-20}
    # Proceed with build steps
    - cd medusa
    - >
      docker build \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:$CI_COMMIT_SHORT_SHA" \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:latest" \
        .
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:$CI_COMMIT_SHORT_SHA"
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:latest"
  # Job-level rules still apply, but only if a pipeline was created by the workflow
  rules:
    - if: $CI_COMMIT_TAG # Run for tags
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run for default branch
      changes:
        - medusa/**/*

build_storefront:
  stage: build
  script:
    # Explicitly clone using SSH URL and configured agent
    - git clone ${CI_SSH_REPOSITORY_URL} . --depth ${GIT_DEPTH:-20}
    # Proceed with build steps
    - cd storefront
    - >
      docker build \
        --build-arg NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY=$NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY \
        --build-arg NEXT_PUBLIC_SEARCH_API_KEY=$NEXT_PUBLIC_SEARCH_API_KEY \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:$CI_COMMIT_SHORT_SHA" \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:latest" \
        .
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:$CI_COMMIT_SHORT_SHA"
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:latest"
  # Job-level rules still apply, but only if a pipeline was created by the workflow
  rules:
    - if: $CI_COMMIT_TAG # Run for tags
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run for default branch
      changes:
        - storefront/**/*