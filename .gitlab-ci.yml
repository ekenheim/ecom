workflow:
  rules:
    - if: $CI_COMMIT_TAG  # Create a pipeline if a tag is pushed
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Otherwise, create a pipeline if it's a push to the default branch

variables:
  # --- SSH Settings ---
  # Use the internal SSH address of the gitlab-shell service
  # Format: ssh://git@<service-name>.<namespace>.svc.cluster.local:<port>/<group>/<project>.git
  CI_SSH_REPOSITORY_URL: ssh://git@gitlab-gitlab-shell.development.svc.cluster.local:22/${CI_PROJECT_PATH}.git
  GIT_DEPTH: 20 # Optional: control clone depth
  # Tell the runner not to clone automatically
  GIT_STRATEGY: none

  # --- Docker Settings ---
  # Use Docker-in-Docker service
  # More info: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  # Improve performance with overlay2 driver
  DOCKER_DRIVER: overlay2
  # Define internal registry address for convenience
  INTERNAL_REGISTRY_ADDRESS: gitlab-registry.development.svc.cluster.local:5000

services:
  - docker:dind # Docker-in-Docker

stages:
  - build # Build stage for creating images

default:
  image: docker:latest # If using this, installs ssh tools below
  tags:
    - k8s
  before_script:
    # --- SSH Setup ---
    # 1. Install SSH client and Git if not present (Needed for docker:latest)
    - apk add --no-cache openssh-client git

    # 2. Setup SSH Agent
    - eval $(ssh-agent -s)

    # 3. Add the private key from the CI/CD variable SSH_PRIVATE_KEY
    #    Ensure SSH_PRIVATE_KEY variable is configured in GitLab CI/CD settings
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

    # 4. Create SSH directory and disable strict host key checking
    #    (Necessary because the runner pod's known_hosts is ephemeral)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -e "Host *\\n\\tStrictHostKeyChecking no\\n\\tUserKnownHostsFile /dev/null" > ~/.ssh/config

    # 5. (Optional but recommended) Add GitLab host key to known_hosts
    #    Get key: ssh-keyscan -p 22 gitlab-gitlab-shell.development.svc.cluster.local
    #    Store in CI var SSH_KNOWN_HOSTS and uncomment below:
    #    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    #    - chmod 644 ~/.ssh/known_hosts
    #    Then remove StrictHostKeyChecking no from ~/.ssh/config

    # --- Docker Login ---
    # Configure Docker to trust the internal HTTP registry
    - mkdir -p /etc/docker
    - echo "{\"insecure-registries\": [\"${INTERNAL_REGISTRY_ADDRESS}\"]}" > /etc/docker/daemon.json
    # Restart Docker service within the dind container (may need adjustment)
    - docker restart || echo "Docker restart might fail in some dind setups, continuing..."
    # Wait a bit for Docker daemon to be ready
    - sleep 10
    # Retry login a few times if needed, as daemon restart can be slow
    - |
      retry=0
      max_retries=3
      until docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "${INTERNAL_REGISTRY_ADDRESS}"; do
        retry=$((retry+1))
        if [ $retry -ge $max_retries ]; then
          echo "Docker login failed after $max_retries attempts."
          exit 1
        fi
        echo "Login attempt $retry failed, retrying in 5 seconds..."
        sleep 5
      done
      echo "Docker login successful."

build_medusa:
  stage: build
  script:
    # Explicitly clone using SSH URL and configured agent
    - git clone ${CI_SSH_REPOSITORY_URL} . --depth ${GIT_DEPTH:-20}
    # Proceed with build steps
    - cd medusa
    - >
      docker build \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:$CI_COMMIT_SHORT_SHA" \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:latest" \
        .
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:$CI_COMMIT_SHORT_SHA"
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/medusa:latest"
  # Job-level rules still apply, but only if a pipeline was created by the workflow
  rules:
    - if: $CI_COMMIT_TAG # Run for tags
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run for default branch
      changes:
        - medusa/**/*

build_storefront:
  stage: build
  script:
    # Explicitly clone using SSH URL and configured agent
    - git clone ${CI_SSH_REPOSITORY_URL} . --depth ${GIT_DEPTH:-20}
    # Proceed with build steps
    - cd storefront
    - >
      docker build \
        --build-arg NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY=$NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY \
        --build-arg NEXT_PUBLIC_SEARCH_API_KEY=$NEXT_PUBLIC_SEARCH_API_KEY \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:$CI_COMMIT_SHORT_SHA" \
        --tag "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:latest" \
        .
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:$CI_COMMIT_SHORT_SHA"
    - docker push "${INTERNAL_REGISTRY_ADDRESS}/${CI_PROJECT_PATH}/storefront:latest"
  # Job-level rules still apply, but only if a pipeline was created by the workflow
  rules:
    - if: $CI_COMMIT_TAG # Run for tags
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run for default branch
      changes:
        - storefront/**/*